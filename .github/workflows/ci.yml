name: Build and Publish

on:
  push:
    branches:
      - '**'
    tags:
      - '*'
  pull_request:
    branches:
      - main

env:
  IMAGE_NAME: flex420/urlaubsverwaltung

jobs:
  ci:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Cache Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('app/urlaubsverwaltung/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      - name: Run unit tests
        working-directory: app/urlaubsverwaltung
        run: ./mvnw -B -DskipITs test

      - name: Verify Docker and Compose
        run: bash ./scripts/verify.sh

      - name: Extract project version
        id: version
        working-directory: app/urlaubsverwaltung
        run: |
          VERSION=$(./mvnw -q help:evaluate -Dexpression=project.version -DforceStdout)
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          if [[ "$VERSION" == *-SNAPSHOT ]]; then
            echo "sanitized=${VERSION%-SNAPSHOT}" >> "$GITHUB_OUTPUT"
          else
            echo "sanitized=${VERSION}" >> "$GITHUB_OUTPUT"
          fi

      - name: Compute image tags
        id: tags
        run: |
          IMAGE=${{ env.IMAGE_NAME }}
          SHORT_SHA=${GITHUB_SHA::12}
          TAGS="$IMAGE:sha-$SHORT_SHA"
          PRIMARY_TAG="$IMAGE:sha-$SHORT_SHA"

          if [[ "${GITHUB_REF_TYPE}" == "branch" ]]; then
            SAFE_BRANCH=$(echo "${GITHUB_REF_NAME}" | tr '[:upper:]' '[:lower:]' | tr -cs 'a-z0-9' '-')
            TAGS="$TAGS\n$IMAGE:branch-$SAFE_BRANCH"
            if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
              VERSION=${{ steps.version.outputs.sanitized }}
              TAGS="$TAGS\n$IMAGE:$VERSION\n$IMAGE:latest"
            fi
          elif [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            TAGS="$TAGS\n$IMAGE:${GITHUB_REF_NAME}"
            PRIMARY_TAG="$IMAGE:${GITHUB_REF_NAME}"
          fi

          printf 'list<<EOF\n%s\nEOF\n' "$TAGS" >> "$GITHUB_OUTPUT"
          echo "primary=$PRIMARY_TAG" >> "$GITHUB_OUTPUT"

      - name: Login to Docker Hub
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and (optionally) push image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name == 'push' }}
          load: true
          tags: ${{ steps.tags.outputs.list }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.tags.outputs.primary }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
